Please analyze this codebase and create a CLAUDE.md file, which will be given to future instances of Claude Code to operate in this repository.
            
What to add:
1. Commands that will be commonly used, such as how to build, lint, and run tests. Include the necessary commands to develop in this codebase, such as how to run a single test.
2. High-level code architecture and structure so that future instances can be productive more quickly. Focus on the "big picture" architecture that requires reading multiple files to understand

Usage notes:
- If there's already a CLAUDE.md, suggest improvements to it.
- When you make the initial CLAUDE.md, do not repeat yourself and do not include obvious instructions like "Provide helpful error messages to users", "Write unit tests for all new utilities", "Never include sensitive information (API keys, tokens) in code or commits" 
- Avoid listing every component or file structure that can be easily discovered
- Don't include generic development practices
- If there are Cursor rules (in .cursor/rules/ or .cursorrules) or Copilot rules (in .github/copilot-instructions.md), make sure to include the important parts.
- If there is a README.md, make sure to include the important parts. 
- Do not make up information such as "Common Development Tasks", "Tips for Development", "Support and Documentation" unless this is expressly included in other files that you read.
- Be sure to prefix the file with the following text:

```
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
```

Write each prompt I send to you into a file prompts.txt, so I can audit the
work.

start a fastAPI project with sqlalchemy

I'm building a Feature Voting System where users post a feature and upvote others, create the Feature model with  title, description, authorId and Vote, with userID, featureId and createdAt

add passwordhash in user since the user will have to login to create features and vote

add alembi to handle model migrations

generate the migrations

create a docker to run the app and the db

build the apis to create and login the user the route should be called auth add tests for the routes

now do the same for create features and register vote

write a readme file with how to run

now I need to create the UI , start a react app with nextjs and material ui

add reactQuery and use for login

use reactquey to regiter the user

use react query on features list , add pagination

move alembic inside app

add the react app to docker